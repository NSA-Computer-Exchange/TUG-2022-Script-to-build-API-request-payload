[{"name":"TUG_2022_GetPONo","description":"","scriptCode":"#######  Get PurchaseOrder No from Sync.PurchaseOrder  #######\n#\n#  Author: Rob Thayer\n#  Date: April 1 2022\n#\n##############################################################\n\nimport io\nimport xml.etree.ElementTree as ET\nimport json\nfrom typing import List\n\nclass DataInput:\n    @staticmethod\n    def getPO():\n        root = ET.fromstring(INPUT)\n        # Set the default namespace object\n        ns = {'xs': 'http://schema.infor.com/InforOAGIS/2'}\n        # Purchase Order Number# is a static value and will be added to each line item under the poNo column\n        poNo = root.find(\".//xs:DataArea/xs:PurchaseOrder/xs:PurchaseOrderHeader/xs:DocumentID/xs:ID\", ns)\n        if poNo is not None:\n            pono = poNo.text[:-3] \n        else:\n            pono = poNo.text\n        return pono  \n         \n''' IDM entity or Document Type '''\nentity = \"Purchase_Order\"\n''' Attribute or Property '''\nkeyattr = \"Purchase_Order_Number\"\n''' Operator like = > < etc. '''\noperator = \"=\"\n''' Set Purchase Order Number '''\nkeyvalue = DataInput.getPO()\n''' Set boolean value'''\ntextSearch = False\n\nclass Query(object):\n    def __init__(self, query: str):\n        self.query = query       \n\nclass Queries(object):\n    def __init__(self, queries: List[Query]):\n        self.queries = queries\n\nclass QueryKeys(object):\n    def __init__(self,entities: str, useTextSearch: str, arguments: str):\n        self.entities = entities\n        self.useTextSearch = useTextSearch\n        self.arguments = arguments\n\nclass ArgumentKeys(object):\n    def __init__(self, key: str, operator: str, value: str, logicalType: str): \n        self.key = key\n        self.operator = operator\n        self.value = value\n        self.logicalType = logicalType\n\nclass ArgumentsArg(object):\n    def __init__(self, argument: List[ArgumentKeys]):\n        self.argument = argument               \n\nargKeys = ArgumentKeys(key=keyattr,operator=operator,value=keyvalue,logicalType=\"string\")\nargsArg = ArgumentsArg([argKeys])\nqueryKeys = QueryKeys(entities=entity,useTextSearch=textSearch, arguments=argsArg)\nquery = Query(query=[queryKeys])\nresult = Queries(queries=query)\n\njson_result = json.dumps(result, default=lambda o: o.__dict__, indent=4)\n\nOUTPUT = json_result","documentation":"","usedLibraries":[],"inputVariables":[],"outputVariables":[],"variables":[{"name":"OUTPUT","fileName":"","description":"","dataType":"STRING","type":"OUTPUT","content":null},{"name":"INPUT","fileName":"","description":"","dataType":"STRING","type":"INPUT","content":null}]}]